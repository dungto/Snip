prob = LpProblem("Warehouse distribution",LpMinimize)

#All routes
Routes = [(s,d) for s in supply_dc for d in demand_store]

# Referenced Route
vars = LpVariable.dicts("Route",(supply_dc,demand_store),0,None)
vars2 = LpVariable.dicts("Built",supply_dc,cat='Binary')

# The objective function is added to 'prob' first
prob += lpSum([vars[s][d]*supply_cost_dict[s][d] for (s,d) in Routes]) + lpSum([vars2[s]*supply_budget_dict[s] for s in supply_dc]), "Sum_of_Transporting_Costs"

# The supply maximum constraints are added to prob for each supply node (warehouse)
for s in supply_dc:
    prob += lpSum([vars[s][d] for d in demand_store])<=(lpDot(supply_dict[s],vars2[s])), "Sum_of_Products_out_of_Warehouse_%s"%s
#    prob += LpConstraint(e=(vars2[s]), sense=LpConstraintGE, rhs=1)

# The demand minimum constraints are added to prob for each demand node (bar)
for d in demand_store:
    prob += lpSum([vars[s][d] for s in supply_dc])==demand_dict[d], "Sum_of_Products_into_Bar%s"%d
                   
# The problem data is written to an .lp file
prob.writeLP("Warehouse distribution.lp")

# The problem is solved using PuLP's choice of Solver
prob.solve()

# The status of the solution is printed to the screen
print("Status:", LpStatus[prob.status])

# Each of the variables is printed with it's resolved optimum value
for v in prob.variables():
        if v.varValue > 0:
            print(v.name, "=", v.varValue)

# The optimised objective function value is printed to the screen    
print("Total = ", value(prob.objective))
